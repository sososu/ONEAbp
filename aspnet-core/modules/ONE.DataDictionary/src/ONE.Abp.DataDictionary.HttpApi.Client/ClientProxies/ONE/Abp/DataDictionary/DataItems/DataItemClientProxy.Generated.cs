// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using ONE.Abp.DataDictionary.DataItems;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace ONE.Abp.DataDictionary.DataItems;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IDataItemAppService), typeof(DataItemClientProxy))]
public partial class DataItemClientProxy : ClientProxyBase<IDataItemAppService>, IDataItemAppService
{
    public virtual async Task CreateCategoryAsync(DataCategoryCreateInput input)
    {
        await RequestAsync(nameof(CreateCategoryAsync), new ClientProxyRequestTypeValue
        {
            { typeof(DataCategoryCreateInput), input }
        });
    }

    public virtual async Task UpdateCategoryAsync(Guid id, DataCategoryUpdate input)
    {
        await RequestAsync(nameof(UpdateCategoryAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(DataCategoryUpdate), input }
        });
    }

    public virtual async Task<ListResultDto<DataItemDto>> GetCategoryAsync()
    {
        return await RequestAsync<ListResultDto<DataItemDto>>(nameof(GetCategoryAsync));
    }

    public virtual async Task CreateAsync(DataItemCreateInput input)
    {
        await RequestAsync(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(DataItemCreateInput), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, DataItemCreateUpdate input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(DataItemCreateUpdate), input }
        });
    }

    public virtual async Task<ListResultDto<DataItemDto>> GetItemsAsync(Guid categoryId)
    {
        return await RequestAsync<ListResultDto<DataItemDto>>(nameof(GetItemsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), categoryId }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<DataItemDto>> GetEnableCategoryAsync()
    {
        return await RequestAsync<ListResultDto<DataItemDto>>(nameof(GetEnableCategoryAsync));
    }

    public virtual async Task<ListResultDto<DataItemDto>> GetEnableItemsAsync(Guid categoryId)
    {
        return await RequestAsync<ListResultDto<DataItemDto>>(nameof(GetEnableItemsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), categoryId }
        });
    }

    public virtual async Task<ListResultDto<DataItemDto>> GetItemsByParentCodeAsync(string code)
    {
        return await RequestAsync<ListResultDto<DataItemDto>>(nameof(GetItemsByParentCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), code }
        });
    }
}
