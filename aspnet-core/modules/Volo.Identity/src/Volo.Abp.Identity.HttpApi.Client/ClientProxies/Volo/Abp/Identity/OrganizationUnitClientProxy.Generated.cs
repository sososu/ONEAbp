// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Xml.Linq;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using Volo.Abp.Identity;

// ReSharper disable once CheckNamespace
namespace Volo.Abp.Identity;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IOrganizationUnitAppService), typeof(OrganizationUnitClientProxy))]
public partial class OrganizationUnitClientProxy : ClientProxyBase<IOrganizationUnitAppService>, IOrganizationUnitAppService
{
    public virtual async Task CreateAsync(OrganizationUnitCreateInput input)
    {
        await RequestAsync(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(OrganizationUnitCreateInput), input }
        });
    }

    public virtual async Task UpdateAsync(OrganizationUnitUpdateInput input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(OrganizationUnitUpdateInput), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<OrganizationUnitDto>> GetListAsync(string name)
    {
        return await RequestAsync<ListResultDto<OrganizationUnitDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<ListResultDto<OrganizationUnitDto>> GetExcludeChild(Guid id)
    {
        return await RequestAsync<ListResultDto<OrganizationUnitDto>>(nameof(GetExcludeChild), new ClientProxyRequestTypeValue
        {
              { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<TreeLabel>> GetOrgTreeAsync()
    {
        return await RequestAsync<ListResultDto<TreeLabel>>(nameof(GetOrgTreeAsync));
    }

    public virtual async Task<OrganizationUnitDto> GetAsync(Guid id)
    {
        return await RequestAsync<OrganizationUnitDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<OrganizationUnitDto>> GetAllChildrenWithParentCodeAsync(string code, Guid? parentId, bool includeDetails)
    {
        return await RequestAsync<ListResultDto<OrganizationUnitDto>>(nameof(GetAllChildrenWithParentCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), code },
            { typeof(Guid?), parentId },
            { typeof(bool), includeDetails }
        });
    }

    public virtual async Task<ListResultDto<OrganizationUnitDto>> GetChildrenAsync(Guid? parentId, bool includeDetails)
    {
        return await RequestAsync<ListResultDto<OrganizationUnitDto>>(nameof(GetChildrenAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid?), parentId },
            { typeof(bool), includeDetails }
        });
    }

    public virtual async Task<ListResultDto<IdentityUserDto>> GetMembersAsync(string displayName, string sorting, int pageSize, int pageIndex, string filter, bool includeDetails)
    {
        return await RequestAsync<ListResultDto<IdentityUserDto>>(nameof(GetMembersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), displayName },
            { typeof(string), sorting },
            { typeof(int), pageSize },
            { typeof(int), pageIndex },
            { typeof(string), filter },
            { typeof(bool), includeDetails }
        });
    }

    public virtual async Task<int> GetMembersCountAsync(string displayName, string filter)
    {
        return await RequestAsync<int>(nameof(GetMembersCountAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), displayName },
            { typeof(string), filter }
        });
    }
}
