// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using ONE.Abp.Pagination.Contracts.Dtos;
using ONE.Abp.SysResource.RoleMenus;
using ONE.Abp.SysResource.SaleVersions;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace ONE.Abp.SysResource.SaleVersions;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ISaleVersionAppService), typeof(SaleVersionClientProxy))]
public partial class SaleVersionClientProxy : ClientProxyBase<ISaleVersionAppService>, ISaleVersionAppService
{
    public virtual async Task CreateAsync(SaleVersionCreateInput input)
    {
        await RequestAsync(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SaleVersionCreateInput), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, SaleVersionUpdateInput input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(SaleVersionUpdateInput), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<SaleVersionDto> GetAsync(Guid id)
    {
        return await RequestAsync<SaleVersionDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResult<SaleVersionDto>> QueryPageAsync(SaleVersionQuery input)
    {
        return await RequestAsync<PagedResult<SaleVersionDto>>(nameof(QueryPageAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SaleVersionQuery), input }
        });
    }

    public virtual async Task<GrantMenus> GetMenuTreeSelected(Guid id, Guid appId)
    {
        return await RequestAsync<GrantMenus>(nameof(GetMenuTreeSelected), new ClientProxyRequestTypeValue
        {
             { typeof(Guid), id },
            { typeof(Guid), appId }
        });
    }

    public virtual async Task SetMenusAsync(Guid id, SaleVersionMenuEditInput input)
    {
        await RequestAsync(nameof(SetMenusAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(SaleVersionMenuEditInput), input }
        });
    }

    public virtual async Task<ListResultDto<GrantApps>> GetAppsAysnc(Guid id)
    {
        return await RequestAsync<ListResultDto<GrantApps>>(nameof(GetAppsAysnc), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
