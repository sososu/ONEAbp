// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using ONE.Abp.DataPermission.Rules;
using ONE.Abp.Pagination.Contracts.Dtos;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace ONE.Abp.DataPermission.Rules;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IUserDataRuleAppService), typeof(UserDataRuleClientProxy))]
public partial class UserDataRuleClientProxy : ClientProxyBase<IUserDataRuleAppService>, IUserDataRuleAppService
{
    public virtual async Task CreateAsync(UserDataRuleCreateInput input)
    {
        await RequestAsync(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UserDataRuleCreateInput), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, UserDataRuleCreateInput input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UserDataRuleCreateInput), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task SetEnableAsync(Guid id, UserDataRuleEnableInput input)
    {
        await RequestAsync(nameof(SetEnableAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UserDataRuleEnableInput), input }
        });
    }

    public virtual async Task<UserDataRuleDto> GetAsync(Guid id)
    {
        return await RequestAsync<UserDataRuleDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<List<UserDataRuleDto>> GetRules(string dataTargetName)
    {
        return await RequestAsync<List<UserDataRuleDto>>(nameof(GetRules), new ClientProxyRequestTypeValue
        {
            { typeof(string), dataTargetName }
        });
    }

    public virtual async Task<PagedResult<UserDataRuleDto>> QueryAsync(UserDataRuleQueryInput input)
    {
        return await RequestAsync<PagedResult<UserDataRuleDto>>(nameof(QueryAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UserDataRuleQueryInput), input }
        });
    }
}
