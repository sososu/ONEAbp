// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using ONE.Abp.DataPermission.Rules;
using ONE.Abp.Pagination.Contracts.Dtos;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace ONE.Abp.DataPermission.Rules;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IUserRuleAppService), typeof(UserRuleClientProxy))]
public partial class UserRuleClientProxy : ClientProxyBase<IUserRuleAppService>, IUserRuleAppService
{
    public virtual async Task<UserRuleDto> CreateAsync(UserRuleCreateInput input)
    {
        return await RequestAsync<UserRuleDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UserRuleCreateInput), input }
        });
    }

    public virtual async Task<UserRuleDto> UpdateAsync(Guid id, UserRuleCreateInput input)
    {
        return await RequestAsync<UserRuleDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UserRuleCreateInput), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<UserRuleDto> GetAsync(Guid id)
    {
        return await RequestAsync<UserRuleDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResult<UserRuleMini>> QueryAsync(UserRuleQueryInput input)
    {
        return await RequestAsync<PagedResult<UserRuleMini>>(nameof(QueryAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UserRuleQueryInput), input }
        });
    }

    public virtual async Task<ListResultDto<IdName<Guid>>> GetIdNamesAsync()
    {
        return await RequestAsync<ListResultDto<IdName<Guid>>>(nameof(GetIdNamesAsync));
    }

    public virtual async Task<ListResultDto<DataTargetFieldDto>> GetUserTargetFieldsAsync()
    {
        return await RequestAsync<ListResultDto<DataTargetFieldDto>>(nameof(GetUserTargetFieldsAsync));
    }
}
