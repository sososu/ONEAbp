// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using ONE.Abp.FileManagement.Files;
using ONE.Abp.Pagination.Contracts.Dtos;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Content;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace ONE.Abp.FileManagement.Files;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IFileAppService), typeof(FileClientProxy))]
public partial class FileClientProxy : ClientProxyBase<IFileAppService>, IFileAppService
{
    public virtual async Task<FileUploadOutputDto> CreateAsync(FileUploadInputDto input)
    {
        return await RequestAsync<FileUploadOutputDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(FileUploadInputDto), input }
        });
    }

    public virtual async Task<bool> DeleteAsync(string name)
    {
        return await RequestAsync<bool>(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<IRemoteStreamContent> DownloadFileAsync(string name)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(DownloadFileAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<RawFileDto> GetAsync(string name)
    {
        return await RequestAsync<RawFileDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<IRemoteStreamContent> GetFileStreamAsync(string name)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(GetFileStreamAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<FileStatisticsDto> GetStatisticsAsync()
    {
        return await RequestAsync<FileStatisticsDto>(nameof(GetStatisticsAsync));
    }

    public virtual async Task<PagedResult<FileRecordDto>> QueryPageAsync(FileQueryInput input)
    {
        return await RequestAsync<PagedResult<FileRecordDto>>(nameof(QueryPageAsync), new ClientProxyRequestTypeValue
        {
            { typeof(FileQueryInput), input }
        });
    }
}
